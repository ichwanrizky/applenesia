// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model role {
  id   Int       @id @unique @default(autoincrement())
  name role_name
  user user[]
}

enum role_name {
  ADMINISTRATOR
  ADMINCABANG
  CASHIER
  TEKNISI
  SUPERVISOR
}

model user {
  id                   Int                @id @unique @default(autoincrement())
  username             String             @unique
  password             String
  name                 String
  telp                 String?
  created_at           DateTime           @db.DateTime(0)
  is_deleted           Boolean            @default(false)
  user_branch          user_branch[]
  role_id              Int
  role                 role               @relation(fields: [role_id], references: [id])
  token                token[]
  access_log           access_log[]
  product_log          product_log[]
  product_purchase     product_purchase[]
  cash_flow            cash_flow[]
  service_technician   service[]          @relation("service_technician")
  service_user_created service[]          @relation("service_user_created")
}

model branch {
  id          Int           @id @unique @default(autoincrement())
  uuid        String        @unique @default(uuid())
  name        String
  address     String?
  alias       String?       @unique
  telp        String?
  latitude    String?
  longitude   String?
  is_deleted  Boolean       @default(false)
  user_branch user_branch[]
  product     product[]
  cash_flow   cash_flow[]
  service     service[]

  @@index([uuid], map: "branch_uuid")
}

model user_branch {
  user_id   Int
  user      user   @relation(fields: [user_id], references: [id])
  branch_id Int
  branch    branch @relation(fields: [branch_id], references: [id])

  @@id([user_id, branch_id])
}

model token {
  id           Int      @id @unique @default(autoincrement())
  access_token String   @db.VarChar(1000)
  created_at   DateTime @db.DateTime(0)
  expired_at   DateTime @db.DateTime(0)
  user_id      Int
  user         user     @relation(fields: [user_id], references: [id])
  is_expired   Boolean  @default(false)

  // @@index([access_token], map: "token_access_token")
}

model access_log {
  id          Int      @id @unique @default(autoincrement())
  description String
  created_at  DateTime @db.DateTime(0)
  user_id     Int
  user        user     @relation(fields: [user_id], references: [id])
}

model device_type {
  id            Int             @id @unique @default(autoincrement())
  name          String          @unique
  device        device[]
  form_checking form_checking[]
}

model device {
  id             Int              @id @unique @default(autoincrement())
  name           String           @unique
  device_type_id Int
  device_type    device_type      @relation(fields: [device_type_id], references: [id])
  product_device product_device[]
  service        service[]
}

model category {
  id               Int                @id @unique @default(autoincrement())
  name             String             @unique
  product_category product_category[]
}

model form_checking {
  id             Int         @id @unique @default(autoincrement())
  name           String      @unique
  device_type_id Int
  device_type    device_type @relation(fields: [device_type_id], references: [id])
}

model payment_method {
  id               Int                @id @default(autoincrement())
  name             String
  product_purchase product_purchase[]
  cash_flow        cash_flow[]
}

model product {
  id               Int                @id @unique @default(autoincrement())
  name             String
  sub_name         String?
  sell_price       Int                @default(0)
  purchase_price   Int                @default(0)
  warranty         Int                @default(0)
  is_inventory     Boolean            @default(false)
  is_pos           Boolean            @default(false)
  product_type     product_type
  created_at       DateTime           @db.DateTime(0)
  is_deleted       Boolean            @default(false)
  branch_id        Int
  branch           branch             @relation(fields: [branch_id], references: [id])
  product_device   product_device[]
  product_category product_category[]
  product_log      product_log[]
  product_purchase product_purchase[]

  @@index([branch_id], map: "product_branch_id")
}

enum product_type {
  INTERFACE
  MACHINE
  ACCESSORY
  OTHER
}

model product_device {
  product_id Int
  product    product @relation(fields: [product_id], references: [id])
  device_id  Int
  device     device  @relation(fields: [device_id], references: [id])

  @@id([product_id, device_id])
  @@index([device_id], map: "product_device_device_id")
  @@index([product_id], map: "product_device_product_id")
}

model product_category {
  product_id  Int
  product     product  @relation(fields: [product_id], references: [id])
  category_id Int
  category    category @relation(fields: [category_id], references: [id])

  @@id([product_id, category_id])
  @@index([category_id], map: "product_category_category_id")
  @@index([product_id], map: "product_category_product_id")
}

model product_log {
  id           Int              @id @unique @default(autoincrement())
  product_id   Int
  product      product          @relation(fields: [product_id], references: [id])
  qty          Int
  type         product_log_type
  created_at   DateTime         @db.DateTime(0)
  created_by   Int
  user_created user             @relation(fields: [created_by], references: [id])
  desc         String?

  @@index([product_id], map: "product_log_product_id")
}

model product_purchase {
  id           Int            @id @unique @default(autoincrement())
  product_id   Int
  product      product        @relation(fields: [product_id], references: [id])
  qty          Int            @default(0)
  price        Int            @default(0)
  created_at   DateTime       @db.DateTime(0)
  created_by   Int
  user_created user           @relation(fields: [created_by], references: [id])
  payment_id   Int
  payment      payment_method @relation(fields: [payment_id], references: [id])
  is_deleted   Boolean        @default(false)

  @@index([product_id], map: "product_purchase_product_id")
}

enum product_log_type {
  IN
  OUT
}

model cash_flow {
  id                  Int            @id @unique @default(autoincrement())
  desc                String
  amount              Int            @default(0)
  type                cash_flow_type
  payment_id          Int
  payment             payment_method @relation(fields: [payment_id], references: [id])
  created_at          DateTime       @db.DateTime(0)
  created_by          Int
  user_created        user           @relation(fields: [created_by], references: [id])
  branch_id           Int
  branch              branch         @relation(fields: [branch_id], references: [id])
  is_deleted          Boolean        @default(false)
  product_purchase_id Int?

  @@index([payment_id], map: "cash_flow_payment_id")
  @@index([branch_id], map: "cash_flow_branch_id")
}

enum cash_flow_type {
  DEBIT
  CREDIT
}

model customer {
  id      Int       @id @unique @default(autoincrement())
  name    String
  telp    String?
  email   String?
  service service[]
}

model service {
  id                    Int                     @id @unique @default(autoincrement())
  uuid                  String                  @unique @default(uuid())
  service_number        String                  @unique
  unique_code           String
  customer_id           Int
  customer              customer                @relation(fields: [customer_id], references: [id])
  device_id             Int
  device                device                  @relation(fields: [device_id], references: [id])
  imei                  String?
  service_desc          String?
  technician_id         Int
  user_technician       user                    @relation("service_technician", fields: [technician_id], references: [id])
  branch_id             Int
  branch                branch                  @relation(fields: [branch_id], references: [id])
  is_deleted            Boolean                 @default(false)
  created_at            DateTime                @db.DateTime(0)
  created_by            Int
  user_created          user                    @relation("service_user_created", fields: [created_by], references: [id])
  month                 Int
  year                  Int
  service_status_id     Int
  service_status        service_status          @relation(fields: [service_status_id], references: [id])
  service_form_checking service_form_checking[]

  @@index([uuid], map: "service_uuid")
  @@index([service_number], map: "service_service_number")
  @@index([unique_code], map: "service_unique_code")
  @@index([customer_id], map: "service_customer_id")
  @@index([device_id], map: "service_device_id")
  @@index([service_status_id], map: "service_service_status_id")
}

model service_form_checking {
  id         Int     @id @default(autoincrement())
  name       String?
  in_check   Boolean @default(false)
  out_check  Boolean @default(false)
  notes      String?
  service_id Int
  service    service @relation(fields: [service_id], references: [id])

  @@index([service_id], map: "service_form_checking_service_id")
}

model service_status {
  id          Int       @id @default(autoincrement())
  name        String
  label_color String
  service     service[]
}
