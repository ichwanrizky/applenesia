// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model role {
  id   Int       @id @unique @default(autoincrement())
  name role_name
  user user[]
}

enum role_name {
  ADMINISTRATOR
  ADMINCABANG
  CASHIER
  TEKNISI
}

model user {
  id               Int                @id @unique @default(autoincrement())
  username         String             @unique
  password         String
  name             String
  telp             String?
  created_at       DateTime           @db.DateTime(0)
  is_deleted       Boolean            @default(false)
  user_branch      user_branch[]
  role_id          Int
  role             role               @relation(fields: [role_id], references: [id])
  token            token[]
  access_log       access_log[]
  product_log      product_log[]
  product_purchase product_purchase[]
}

model branch {
  id          Int           @id @unique @default(autoincrement())
  uuid        String        @unique @default(dbgenerated("uuid()"))
  name        String
  address     String?
  alias       String?       @unique
  telp        String?
  latitude    String?
  longitude   String?
  is_deleted  Boolean       @default(false)
  user_branch user_branch[]
  product     product[]

  @@index([uuid], map: "branch_uuid")
}

model user_branch {
  user_id   Int
  user      user   @relation(fields: [user_id], references: [id])
  branch_id Int
  branch    branch @relation(fields: [branch_id], references: [id])

  @@id([user_id, branch_id])
}

model token {
  id           Int      @id @unique @default(autoincrement())
  access_token String   @db.VarChar(1000)
  created_at   DateTime @db.DateTime(0)
  expired_at   DateTime @db.DateTime(0)
  user_id      Int
  user         user     @relation(fields: [user_id], references: [id])
  is_expired   Boolean  @default(false)

  @@index([access_token], map: "token_access_token")
}

model access_log {
  id          Int      @id @unique @default(autoincrement())
  description String
  created_at  DateTime @db.DateTime(0)
  user_id     Int
  user        user     @relation(fields: [user_id], references: [id])
}

model device_type {
  id            Int             @id @unique @default(autoincrement())
  name          String          @unique
  device        device[]
  form_checking form_checking[]
}

model device {
  id             Int              @id @unique @default(autoincrement())
  name           String           @unique
  device_type_id Int
  device_type    device_type      @relation(fields: [device_type_id], references: [id])
  product_device product_device[]
}

model category {
  id               Int                @id @unique @default(autoincrement())
  name             String             @unique
  product_category product_category[]
}

model form_checking {
  id             Int         @id @unique @default(autoincrement())
  name           String      @unique
  device_type_id Int
  device_type    device_type @relation(fields: [device_type_id], references: [id])
}

model payment_method {
  id               Int                @id @default(autoincrement())
  name             String
  product_purchase product_purchase[]
}

model product {
  id               Int                @id @unique @default(autoincrement())
  name             String
  sub_name         String?
  sell_price       Int                @default(0)
  purchase_price   Int                @default(0)
  warranty         Int                @default(0)
  is_inventory     Boolean            @default(false)
  is_pos           Boolean            @default(false)
  product_type     product_type
  created_at       DateTime           @db.DateTime(0)
  is_deleted       Boolean            @default(false)
  branch_id        Int
  branch           branch             @relation(fields: [branch_id], references: [id])
  product_device   product_device[]
  product_category product_category[]
  product_log      product_log[]
  product_purchase product_purchase[]

  @@index([branch_id], map: "product_branch_id")
}

enum product_type {
  INTERFACE
  MACHINE
  ACCESSORY
  OTHER
}

model product_device {
  product_id Int
  product    product @relation(fields: [product_id], references: [id])
  device_id  Int
  device     device  @relation(fields: [device_id], references: [id])

  @@id([product_id, device_id])
  @@index([device_id], map: "product_device_device_id")
  @@index([product_id], map: "product_device_product_id")
}

model product_category {
  product_id  Int
  product     product  @relation(fields: [product_id], references: [id])
  category_id Int
  category    category @relation(fields: [category_id], references: [id])

  @@id([product_id, category_id])
  @@index([category_id], map: "product_category_category_id")
  @@index([product_id], map: "product_category_product_id")
}

model product_log {
  id           Int              @id @unique @default(autoincrement())
  product_id   Int
  product      product          @relation(fields: [product_id], references: [id])
  qty          Int
  type         product_log_type
  created_at   DateTime         @db.DateTime(0)
  created_by   Int
  user_created user             @relation(fields: [created_by], references: [id])
  desc         String?

  @@index([product_id], map: "product_log_product_id")
}

model product_purchase {
  id           Int            @id @unique @default(autoincrement())
  product_id   Int
  product      product        @relation(fields: [product_id], references: [id])
  qty          Int            @default(0)
  price        Int            @default(0)
  created_at   DateTime       @db.DateTime(0)
  created_by   Int
  user_created user           @relation(fields: [created_by], references: [id])
  payment_id   Int
  payment      payment_method @relation(fields: [payment_id], references: [id])

  @@index([product_id], map: "product_purchase_product_id")
}

enum product_log_type {
  IN
  OUT
}
